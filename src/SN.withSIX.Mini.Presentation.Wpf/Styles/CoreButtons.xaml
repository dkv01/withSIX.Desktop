<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Style x:Key="ColorButton" BasedOn="{StaticResource MetroFlatButton}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource SixGray}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AccentButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
    </Style>

    <Style x:Key="BlackButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{DynamicResource BlackBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
    </Style>

    <Style x:Key="WhiteButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="BlueButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixBlue}" />
    </Style>

    <Style x:Key="GreenButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixGreen}" />
    </Style>

    <Style x:Key="OrangeButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixOrange}" />
    </Style>

    <Style x:Key="RedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixSoftRed}" />
    </Style>

    <!-- We dont want to use a Gray Button if we already use Gray as a disabled state for a button!
    <Style x:Key="GrayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixGray}" />
    </Style>
-->

    <Style TargetType="{x:Type Button}" x:Key="ButtonBaseStyle">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType=Control},Path=Foreground}" />

        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter"
                                              TextBlock.Foreground="{TemplateBinding Foreground}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              RecognizesAccessKey="True"
                                              Opacity="{TemplateBinding Opacity}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CustomButtonBaseStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.75" />
            </Trigger>
            <!--
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#ADADAD" />
            </Trigger>
-->
        </Style.Triggers>
    </Style>

    <Style x:Key="BigButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Setter Property="FontSize" Value="32" />
        <Setter Property="Padding" Value="24" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonBaseStyle}"
           x:Key="CustomChromelessButtonStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="1" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomChromelessButtonStyle}"
           x:Key="MetroTextButtonStyle">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Cursor" Value="Hand" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ImageButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="TopButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Padding" Value="4" />
        <Setter Property="MinWidth" Value="32" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="BorderBrush" Value="{StaticResource SixSoftGray}" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style x:Key="ImageButtonReverseStyle" TargetType="{x:Type Button}"
           BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Opacity" Value="0.75" />
        <Setter Property="Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#ADADAD" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>