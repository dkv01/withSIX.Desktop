<html>

<head>
<meta http-equiv="Content-Language" content="en-au">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
</head>

<body>

<p><font face="Arial" size="6">Eliteness Version 3.xx</font></p>

<p>This document has been (partly) revised as of version.3.10</p>

<p>Please note that 'version 3' is <b>not</b> a new ballgame, i simply ran out 
of numbers after the release of 2.99</p>

<p><i><font face="Arial">Fixes: see fixes and readme general</font></i></p>
<p><font face="Arial">General inspection and play tool by
<a href="mailto:Mikero@norfolk.nf">Mikero@norfolk.nf</a></font></p>
<p><i><font face="Arial">Originally designed to assist with Flashpoint : <b>Elite</b> for 
the xbox and developed as such by&nbsp; <b>Mikero</b> and <b>Hoz</b>. We have 
become rather fond of the name, even though it is a much more capable tool than 
simply handling Xbox files.</font></i></p>
<p><i><font face="Arial">Appreciation to Ofpec, Planck. Hoz, Jahve, Raedor, 
Phaeden, Q, Kegs, and many others, for support and encouragement in both using 
and testing this tool.</font></i></p>
<p><i><font face="Arial">Particular thanks to dev-heaven.</font></i></p>
<hr>
<p><font face="Arial">Eliteness accommodates unique features found in almost all BI engines</font></p>
<ul>
  <li><font face="Arial">Cold War Crisis</font></li>
  <li><font face="Arial">Resistance</font></li>
  <li><font face="Arial">Xbox Elite</font></li>
  <li><font face="Arial">Armed Assault</font></li>
  <li><font face="Arial">Arrowhead / Baf / PMC</font></li>
  <li><font face="Arial">IFA</font></li>
  <li><font face="Arial">Dayz</font></li>
  <li><font face="Arial">Toh</font></li>
  <li><font face="Arial">vbs2 lite</font></li>
</ul>
<p><font face="Arial">Eliteness does not work with the VBS1 &amp; 2 engines.</font></p>
<p><i><font face="Arial">This tool has <b>no </b>&nbsp;association with 
Bohemia Interactive and <b>no</b> approval, warranty, implied use, or permission 
has been given by them. Nor is that ever likely to be the case. Use this tool at 
own risk. If thru using this tool, your mother in law drops down&nbsp; dead or 
you wife runs off with your secretary, well hell. Sue me.</font></i></p>
<p><u><font face="Arial">Installation instructions.</font></u></p>
<p><font face="Arial">This exe like all other pbo tools comes with it's own, 
no-brainer, self installer. You are advised to use it. Many tools interact 
with each other and need common registry settings and common file locations to 
do so.</font></p>
<p><font face="Arial">If you choose to roll your own:</font></p>
<ul>
  <li><font face="Arial">Place the gui anywhere that gives you a thrill</font></li>
  <li><font face="Arial">Place the separately supplied DePbo.dll into the same 
  folder, or, as a convenience, locate it in the windows/system32 directory (or 
  wow64)</font><ul>
  <li><font face="Arial">The 2nd option allows this dll to be used for all 
  Mikero tools using the dll via a single reference, and also allows you to put 
  the exe 'somewhere else' whenever it suits you.</font></li>
</ul>
  </li>
  <li><font face="Arial">Enjoy</font></li>
</ul>
<hr>
<p><font face="Arial"><b>General Functionality. </b></font></p>
<ul>
  <li><font face="Arial">Makes and Unmakes pbo files for all engine types.</font></li>
  <li><font face="Arial">drag n drop any folder or file to the folder browser 
  window for quick navigation</font></li>
  <li><font face="Arial">raPifies (binarises) and Derapifies mission.sqm / 
  description.ext / config.bin (cpp) and rvmat files for all engine types.</font></li>
  <li><font face="Arial">Lint checking. (Error checking of syntax) within pbo's 
  and direct source text files.</font></li>
  <li><font face="Arial">Scans (lists)&nbsp; pbo content and makeup.</font></li>
  <li><font face="Arial">Decodes and views any raP encoded file. rvmat, bisurf, 
  etc etc.</font></li>
  <li><font face="Arial">lists pac/paa content.</font></li>
  <li><font face="Arial">Decodes most other bis files such as fxy, rtm, wss, wrp 
  and etc</font></li>
</ul>
<p><font face="Arial"><b>OFP Elite Functions:</b></font></p>
<ul>
  <li><font face="Arial">Change a User Profile in a OFP:Elite mission Save</font></li>
  <li><font face="Arial">Change SP mission to MP mission</font></li>
  <li><font face="Arial">Change the name of the mission</font></li>
  <li><font face="Arial">Port PC mission to OFP:Elite Xbox mission from a PC 
  mission</font></li>
  <li><font face="Arial">Sign OFP:Elite files</font></li>
  <li><font face="Arial">Accounts for Pbo checksum</font></li>
</ul>
<p><b><font face="Arial">Arma Functions</font></b></p>
<ul>
  <li><font face="Arial">Accommodates prefix directory header info inside pbo.</font></li>
  <li><font face="Arial">Accounts for pbo signed keys.</font></li>
  <li><font face="Arial">All other esoteric arma pbo wrinkles</font></li>
</ul>
<p><font face="Arial">
<u>Notes:</u></font></p>
<p><font face="Arial">This is a multi-purpose tool for all engine varieties as 
noted above.</font></p>
<p><font face="Arial">When decoding, the dll determines the engine type the file 
is intended for.</font></p>
<p><font face="Arial">When creating files and exporting, the engine type 
intended is arbitrary. For this reason you need to set the target engine in the 
options panel. On installation the default is Arma.</font></p>
<p><font face="Arial">Use the options panel in the gui to explicitly MAKE pbo's, 
or, raPified (binarised) files for a given engine. Settings are preserved on 
exit.</font></p>
<p><b><font face="Arial" size="6">Rapified Files</font></b></p>
<p><b><font face="Arial">Config.bin (eg)</font></b><u><font face="Arial"> Rapification for Armed Assault and Elite.</font></u></p>
<p><font face="Arial">Binarised files for Armed Assault and Elite use a newer 
method of raPification. To convert a config.cpp (eg) to a config.bin for THESE 
engines, the tool must explicitly know which method to use since nothing in the 
text file (mission.sqm eg) tells it which way to encode.</font></p>
<p><font face="Arial">The type of raPification is implicitly defined in the 
options panel, via the engine selection. Eg, Selecting resistance, will binarise 
using the older encoding.</font></p>
<p><font face="Arial">The type of raPification can be explicitly defined in the 
text file concerned by stating</font></p>
<p><font face="Arial">#define _ARMA_&nbsp; <b>or</b><br>
#define _XBOX_ <b>&nbsp; [</b>withSignature<b>] or<br>
#define _OFP_</b></font></p>
<p><font face="Arial"><b><br>
</b>Without the define, text files are assumed to be for 
Arma. This means no files from and for Arma require any modification but you are 
advised to state it explicitly. We don't know when bis will change the target 
output format again. There are no performance losses doing this or any 
incompatibility issues with other tools or the bis engine itself.</font></p>
<p><font face="Arial">All debinned files insert one of the above defines 
automatically, and as a future convenience for you.</font></p>
<p><u><b><font face="Arial">XBOX Signatures</font></b></u></p>
<p><font face="Arial">Mission,pars, header.bins and other files intended for the 
Xbox (and unique to the xbox) require correct signatures inserted into them by 
this tool. </font></p>
<p><font face="Arial">The macro</font></p>
<p><font face="Arial">#define&nbsp; XBOX withSignature&nbsp; // or #pragma XBOX 
withSignature</font></p>
<p><font face="Arial">is required in the mission.par text file and similarly the 
header.bin text file for this to take place automatically.</font></p>
<p><font face="Arial">Any file derapified by this tool automatically has the 
above #defines inserted, as appropriate.</font></p>

<hr>
<p><b><font face="Arial" size="5">Options Panel</font></b></p>
<p><font face="Arial">To cater for the various engines available, certain features are enabled / disabled 
according to selection.</font></p>
<p><font face="Arial">For instance, since file signatures are only applicable to 
Elite, the options dealing with this (verification or creation) are only enabled 
when Elite is selected as the engine.</font></p>
<p><font face="Arial">The drop down engine selection has particular significance when 
creating pbo's. or creating rapified files.</font></p>
<p><font face="Arial">Elite pbo's cannot, for instance, be compressed. All ofp 
files can, and only some Arma files. Let the dll decide, but setting the correct 
engine type.</font></p>
<p><b><u><font face="Arial">No Make/Create confirmation</font></u></b></p>
<p><font face="Arial">Creating and extracting pbo's can, naturally, be a 
dangerous process, simply because it creates files. Normally, you would want to 
be asked first. The option exists to turn this confirmation off, if you find it 
annoying.</font></p>
<p><b><u><font face="Arial">No Query on Delete</font></u></b></p>
<p><font face="Arial">Similar comment</font></p>
<p><b><u><font face="Arial">Show CD Drives</font></u></b></p>
<p><font face="Arial">Since these devices are read only, and since, filling the 
explorer tree can take some time, normally, cd drives are not shown in the 
navigation window.</font></p>
<p><b><font face="Arial">When creating a pbo....</font></b></p>
<p><font face="Arial">None of the following options affect the external files. 
Thumbs.db however is <b>never</b> installed in a pbo.</font></p>
<p><u><font face="Arial">Do nothing Special</font></u></p>
<p><font face="Arial">No file is inspected or altered. The pbo creates a mirror 
of files in the target folder (except for thumbs.db)</font></p>
<p><u><font face="Arial">Automatically Lintcheck</font></u></p>
<p><font face="Arial">When creating pbo's, this application can check the syntax 
of description.ext, config.cpp, and mission.sqm rvmat files&nbsp; for errors before making the pbo.</font></p>
<p><font face="Arial">Alternatively, you can manually check these files via the 
right click in the file window.</font></p>
<p><u><font face="Arial">Automatically Rapify</font></u></p>
<p><font face="Arial">config.cpp, and mission.sqm and all rvmat files can be installed in the pbo as 
binarised. This can significantly improve engine load times, to say nothing of 
the implicit error free state of&nbsp; successfully binarised text.</font></p>
<p><u><font face="Arial">Automatically Rapify Keep Text</font></u></p>
<p><font face="Arial">When enabled, the original mission.sqm text file (eg) is 
renamed <u>in the pbo</u> as mission.sqm.txt</font></p>
<p><font face="Arial">Similar comment for config.cpp</font></p>
<p><font face="Arial">If you are distributing your mission campaign or addon, 
NOT including the original text files is a mild form of intellectual property 
right protection.</font></p>
<p>&nbsp;</p>
<hr>
<p><b><u><font face="Arial">Ask For Prefix deprecated</font></u></b></p>
<p><font face="Arial">Eliteness automatically assigns the correct prefix in the pbo 
header, when appropriate.  </font></p>
<p><b><u><font face="Arial">Compress Files</font></u></b></p>
<p><font face="Arial">When enabled, files are compressed inside the pbo. The 
exception list provides for typical file extensions (such as jpg) that have no 
benefit in doing so and only increase engine load times.</font></p>
<p><font face="Arial">Note that the dll itself decides whether files are worthy 
of compression. </font></p>
<ul>
  <li><font face="Arial">The result must be better than the input</font></li>
  <li><font face="Arial">Certain files are never compressed dependent on engine 
  type and dependent on how they are used.</font></li>
</ul>
<p><font face="Arial">lzss Compression has been deprecated by Bis (actually, 
they've just plain forgot it's still in the engine). This compression method 
offers you a mild form of protection against extraction. most other tools throw 
their hands in the air if encountered.</font></p>
<hr>
<p><b><font face="Arial">RAPIFY and DERAPIFY controls</font></b></p>
<p><u><font face="Arial">DeRapfiy </font></u></p>
<p><font face="Arial">The application is aware of specific file extensions that 
are (or might be) in rap format. Examples</font></p>
<ul>
  <li><font face="Arial">mission.sqm</font></li>
  <li><font face="Arial">config.bin / cpp</font></li>
  <li><font face="Arial">mission.par (elite only)</font></li>
  <li><font face="Arial">header.bin (elite only)</font></li>
  <li><font face="Arial">*.rvmat (arma only)</font></li>
</ul>
<p><font face="Arial">right clicking, <b>or</b>, double clicking on these files 
types (among others) allows the option of 
decoding them. When attempting to open these types of files as text (the default 
'action' when double clicking), the application automatically checks first if, 
in fact, it contains raPified content and treats them appropriately.</font></p>
<p><b><font face="Arial">General Lint Options</font></b></p>
<ul>
  <li><font face="Arial">Allow Missing SemiColons</font></li>
</ul>
<p><font face="Arial">Prior to release 2.28 of eliteness, lack of semicolons at 
end of line was 'acceptable'. The ofp engine (versus arma) accepts an 'assumed' 
semicolon where end of line is reached.</font></p>
<p><font face="Arial">Due to the pernickedness of Arma, and the fact that it's 
'not a good idea' anyway, the default for arma, is to scream if these items are 
missing.</font></p>
<ul>
  <li><font face="Arial">Disallow Array Semicolons</font></li>
</ul>
<p><font face="Arial">Desctription.ext is notorious for the following:</font></p>
<p><font face="Arial">&nbsp;titles[] = <br>
&nbsp;{<br>
&nbsp; 0, $STRD_DX02v01;<br>
&nbsp; 13, $STRD_DX02v01a<br>
&nbsp;};<br>
&nbsp;</font></p>
<p><font face="Arial">the semicolon is not rapifiable (which is one reason why desc.ext cannot be binarised)</font></p>
<p><font face="Arial">The default for this is to allow the semicolon to pass 
thru un checked. Not a good idea, but too many desc files have this structure 
and would cause lint to scream a little too much.</font></p>
<ul>
  <li><font face="Arial">Force Arma Rap</font></li>
</ul>
<p><font face="Arial">&nbsp;this is the default for Arma and Elite selection, so the 
the #define _ARMA_ macro is not required (but it's good practice anyway to state 
it)</font></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<hr>
<p><b><font face="Arial" size="4">PBO CREATION</font></b></p>

<p><b><font face="Arial">Create a bikey (arma only)</font></b></p>

<p><font face="Arial">An Arma pbo contains an MD5 checksum signature at the end 
of the file.</font></p>

<p><font face="Arial"><b>This</b> signature does nothing more (or less) than 
verify the integrity of the pbo. It is ignored by the arma engine and need not 
be present at all!</font></p>

<p><font face="Arial">However, this same signature <b>is</b> used to generate 
the bikey used for MP play.</font></p>

<p><font face="Arial">The bikey is generated from a combination of an author's <b>
private</b> key and the pbo's MD5 checksum.</font></p>

<p><font face="Arial">Enabling the above check, causes a bikey for THIS 'unique' 
pbo,&nbsp; to be generated.</font></p>

<p><font face="Arial">Be aware, that if you choose to generate a bikey at all:</font></p>

<p><font face="Arial"><b><span style="background-color: #FF0000">no two pbos can 
ever have identical MD5 checksums due to timestamps. If you recreate your pbo, 
even with, identical data, you need , a new bikey.</span></b></font></p>

<p>Note that the separate tool 'extractpbo' and 'makepbo' can make un-datestamped 
pbo's avoiding the above issue.</p>

<p>-----------</p>

<p><font face="Arial">The following functionality is a feature of the 
accompanying DLL. The Eliteness tool exposes these features.</font></p>

<p><u><b><font face="Arial">Special file handling.</font></b></u></p>

<p><b><font face="Arial">thumbs.db</font></b></p>

<ul>
  <li><font face="Arial">this annoying file is created on the fly by Microsoft 
  when indexing picture files. It is <b>never</b> included in a pbo.</font></li>
</ul>
<p><b><font face="Arial">$PBOPREFIX$[.txt] or PboPrefix.txt</font></b></p>

<p><font face="Arial">Eliteness attempts to maintain compatibility with other 
tools trying to wrestle with unique features of Armed Assault.</font></p>

<p><font face="Arial">$PBOPREFIX$ is an inconvenient and early attempt by 
kegetys and myself to wrestle the xbox to the floor. The much more power packed 
 
$PBOPREFIX$ .txt replaces it.</font></p>

<p><font face="Arial">The dll will accept either of these files.</font></p>

<p><font face="Arial">In essence, an arma/elite pbo uses the resistance header 
to contain file prefix information. The prefix is used for other addons to 
access this one.</font></p>

<ul>
  <li><font face="Arial">For extraction, if this file is erroneously encountered in the pbo, 
  it is ignored. It&nbsp; has no effect, serves no purpose at all, <u>
  and is invisible to all extraction methods</u>.</font></li>
  <li><font face="Arial">For extraction, a $</font><b><font face="Arial">PboPrefix$.txt</font></b><font face="Arial"> will be created in the folder  if Eliteness detects an arma/elite header.&nbsp;</font></li>
  <li><font face="Arial"><b>For creation, if</b> encountered in the folder, it's text contents are 
  used as the prefix header for Armed Assault and Elite style pbo's.</font><ul>
  <li><font face="Arial">Note that there is now a great deal more information 
  packed in arrowhead pbo's of the var=value type. With exceptions, the dll will 
  copy this information into the pbo.</font></li>
  <li><font face="Arial">Note most carefully, this is essential for you when 
  creating pbo's specific to and only for, Arma3 or IFA or vbs2lite</font></li>
</ul>
  </li>
</ul>
<p><i><font face="Arial">The following comments apply when the full features of 
the dll are employed to automate the process of creating binarised missions and 
addons. To create plain vanilla pbo's with no special handling (eg just like any 
other pbo tool) simply select do nothing, in the options panel.</font></i></p>

<p><b><font face="Arial">description.ext</font></b></p>

<ul>
  <li><font face="Arial">Any of the panel options to AutoLint or AutoRap, check 
  this file for syntax correctness. </font></li>
</ul>
<p><b><font face="Arial">config.cpp</font></b></p>
<ul>
  <li><font face="Arial">AutoLint: This file is checked for syntax correctness.</font></li>
  <li><font face="Arial">AutoRap..: This file is Lint checked and binarised to 
  config.bin and installed in the pbo <b>instead</b> of config.cpp .</font><ul>
    <li><font face="Arial">After pbo creation, the folder will <b>also</b> 
    contain this config.bin.</font></li>
  </ul>
  </li>
</ul>
<p><b><font face="Arial">confg.cpp.txt</font></b></p>
<p><font face="Arial">Following comments apply <u>only</u> if AutoRap Keep Text 
option selected. Otherwise this file  is treated 'normally'.</font></p>
<ul>
  <li><font face="Arial">For makepbo: The original config.cpp text file is 
  renamed internally in the pbo to config.cpp.txt. It is <b>not</b> generated in 
  the folder.</font><ul>
    <li><font face="Arial">If the same filename happens to be present in the 
    folder during creation<b>, </b>that file is ignored.</font></li>
  </ul>
  </li>
  <li><font face="Arial">For Depbo: It can of course&nbsp; be extracted to a&nbsp; 
  folder, from the depbo process.&nbsp; It is up to the user to manually rename 
  it config.cpp as appropriate to the need.</font></li>
</ul>
<p><b><font face="Arial">config.bin</font></b></p>
<ul>
  <li><font face="Arial">This file is overwritten if it exists and an Autorap 
  option selected. It is unconditionally included irrespective of options.</font></li>
</ul>
<p><b><font face="Arial">mission.sqm</font></b></p>
<ul>
  <li><font face="Arial">AutoLint: This file is checked for syntax correctness.</font></li>
  <li><font face="Arial">AutoRap..: This file is Lint checked and binarised and 
  replaces the text file in the pbo.</font><ul>
    <li><font face="Arial">It is installed in the pbo as mission.sqm</font></li>
    <li><font face="Arial">a copy is generated in the folder as mission.bin</font></li>
  </ul>
  </li>
</ul>
<p><b><font face="Arial">mission.sqm.txt</font></b></p>
<ul>
  <li><font face="Arial">Identical commentary to config.cpp.txt above.</font></li>
</ul>
<p><b><font face="Arial">mission.bin</font></b></p>
<ul>
  <li><font face="Arial">is never installed in a pbo</font></li>
</ul>

<p><u><b><font face="Arial">*.rvmat</font></b></u></p>
<ul>
  <li><font face="Arial">AutoLint: This file is checked for syntax correctness.</font></li>
  <li><font face="Arial">AutoRap..: This file is Lint checked and binarised and 
  replaces the text file in the pbo.</font></li>
</ul>

<hr>
<p><b><font face="Arial" size="5">External file checks</font></b></p>
<p><font face="Arial">The most powerful feature of the dll, and consequently 
Eliteness, is it's ability to discover bad file references in your files 
(plural)</font></p>
<p><font face="Arial">This feature will, indeed, save you hours of agony, start/ 
check /crash, fix, start/ check/ crash..........</font></p>
<p>The dll will simply not permit a pbo to be created if a file is missing in 
ANY reference. This includes references in wrps, references in bisurf, rvmat, 
p3d's, in fact any file included in the pbo of ANY type is examined for external 
file references. Mission.sqm and desc.ext as well. In fact, <b>any </b>file.</p>

<p>The same can be said for any syntax errors. the dll goes out of it's way to
<b>prevent</b> a bad pbo being created.</p>

<p>The 'key' to success however is that you must have established a 'p' drive. 
the drive must contain the extracted contents of the engine. A useful utility 
called arma2p (or arma3p) will do this for you.</p>

<p>The reason for this requirement is files in the engine cannot be 'anywhere' 
on the windows os. they ALL are relative to the linux root folder /.&nbsp; and 
to&nbsp; achieve that, you require a p:\ drive to emulate it.</p>

<p>Quite frankly, if you haven't established a p: drive, you simply aren't 
serious. You don't need, and my tools aren't, useful to you. Live with your 
crash to desktops until you bite the bullet.</p>

<p><font face="Arial" size="5">Sundry Extras</font></p>

<p><font face="Arial">Eliteness is a one stop shop for <b>examining</b> bis 
files. Separate utilities such as DeP3d will <b>create</b> files. With the 
exception of making pbo's, Eliteness is not in the same game. It is an 
inspection tool to check results.</font></p>

<p><font face="Arial"><b>Sundry extras </b>is my attempt at documenting the 
added goodies to eliteness as time permits</font></p>

<p><font face="Arial">DeRtm</font></p>

<p><font face="Arial">Despite the above comments about non-creation. the dertm 
panel within Eliteness is full featured and equivalent to it's external 
namesake.</font></p>

<p><font face="Arial">You can drag and drop any p3d, rtm or skeleton text file 
onto that panel as appropriate, or imply use it's browse buttons</font></p>

<p><font face="Arial">DeRtm analyses and displays the contents of any binarised, 
or unbinarised rtm. Up to and including Arma3</font></p>

<p><font face="Arial">As an added feature it can export binarised rtm back to 
plain jane.</font></p>

<p><font face="Arial">Be aware that for this to happen, the dll requires an 
appropriate skeleton to work with. This is almost inevitably ofp2_manskeleton. 
Animated destructions require their own unique skeleton for their own unique 
p3d.</font></p>

<p><font face="Arial">In all cases, you can provide A skeleton from <b>any</b> 
binarised soldier p3d eg, <b>or, </b>&nbsp;text equivalent of model.cfg (the 
file name is not important providing it contains the appropriate skeleton.cfg)</font></p>

<p><font face="Arial">As stated the 'appropriate' skeleton is almost always 
ofp2_manskeleton, obtainable in <b>any </b>&nbsp;human p3d</font></p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

<p>&nbsp;</p>

</body>

</html>