<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:extensions="clr-namespace:SN.withSIX.Core.Presentation.Wpf.Extensions"
                    xmlns:behaviors="clr-namespace:SN.withSIX.Core.Presentation.Wpf.Behaviors">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="CoreConverters.xaml" />
        <ResourceDictionary Source="CoreColors.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- TODO: Diff between BaseDark and BaseLight -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{DynamicResource SixSoftGrayColor}" />
    <SolidColorBrush x:Key="WindowTitleColorBrush" Color="{DynamicResource WhiteColor}" />

    <Style TargetType="{x:Type Window}">
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    </Style>

    <!-- for design time -->
    <Style TargetType="{x:Type UserControl}">
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    </Style>

    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource MetroStatusBar}">
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    </Style>

    <Style TargetType="{x:Type controls:MetroProgressBar}"
           BasedOn="{StaticResource {x:Type controls:MetroProgressBar}}">
        <Setter Property="Foreground" Value="{DynamicResource AccentColorBrush}" />
    </Style>

    <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MetroProgressBar}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style x:Key="SixPath" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style TargetType="{x:Type Path}" BasedOn="{StaticResource SixPath}" />

    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MetroTextBox}">
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MetroToolTip}">
        <Style.Triggers>
            <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MetroCheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="hover" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="pressed" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To=".55"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="contentPresenter" />
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="checkBox" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="indeterminate" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="focused" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                                       Storyboard.TargetName="ValidationErrorElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="InvalidFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                                       Storyboard.TargetName="ValidationErrorElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                                                                       Storyboard.TargetName="validationTooltip">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="18" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Fill="{DynamicResource TransparentWhiteBrush}" />
                        <Rectangle x:Name="normal"
                                   Opacity="1"
                                   Stroke="{DynamicResource CheckBoxBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="hover"
                                   Stroke="{DynamicResource CheckBoxMouseOverBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Opacity="0"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="pressed"
                                   Opacity="0"
                                   Stroke="{DynamicResource HighlightBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="focused"
                                   Opacity="0"
                                   Stroke="{DynamicResource HighlightBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Border x:Name="ValidationErrorElement"
                                BorderBrush="{DynamicResource ControlsValidationBrush}"
                                BorderThickness="1"
                                CornerRadius="1"
                                ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed"
                                Width="18"
                                Height="18">
                            <ToolTipService.ToolTip>
                                <ToolTip x:Name="validationTooltip"
                                         DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                         Placement="Right"
                                         PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                         Template="{DynamicResource ValidationToolTipTemplate}">
                                    <ToolTip.Triggers>
                                        <EventTrigger RoutedEvent="Canvas.Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames
                                                        Storyboard.TargetProperty="IsHitTestVisible"
                                                        Storyboard.TargetName="validationTooltip">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <sys:Boolean>true</sys:Boolean>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </ToolTip.Triggers>
                                </ToolTip>
                            </ToolTipService.ToolTip>
                            <Grid Background="Transparent"
                                  HorizontalAlignment="Right"
                                  Height="10"
                                  Margin="0,-4,-4,0"
                                  VerticalAlignment="Top"
                                  Width="10">
                                <Path Data="M 1,0 L5,0 A 2,2 90 0 1 7,2 L7,6 z"
                                      Fill="{DynamicResource ValidationBrush5}"
                                      Margin="0,3,0,0" />
                                <Path Data="M 0,0 L2,0 L 7,5 L7,7"
                                      Fill="{DynamicResource WhiteBrush}"
                                      Margin="0,3,0,0" />
                            </Grid>
                        </Border>
                        <Path x:Name="checkBox"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z"
                              Fill="{StaticResource SixGreen}"
                              UseLayoutRounding="False" />
                        <Path x:Name="indeterminate"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              Data="F1M1440.351,1170.416L1440.351,1170.416 1170.351,1440.416 720.351,990.416 270.351,1440.416 0.351,1170.416 450.351,720.416 0.351,270.417 270.351,0.417 720.351,450.417 1170.351,0.417 1440.351,270.417 990.351,720.416z"
                              Fill="{StaticResource SixSoftRed}"
                              UseLayoutRounding="False" />
                        <Path x:Name="disabled"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              UseLayoutRounding="False" />
                        <Rectangle x:Name="IndeterminateCheck"
                                   Opacity="0"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource SemiTransparentWhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          Grid.Column="1"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="InversedToolTip" TargetType="{x:Type ToolTip}" BasedOn="{StaticResource {x:Type ToolTip}}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border x:Name="Root"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{DynamicResource WhiteBrush}"
                            Effect="{DynamicResource DropShadowBrush}"
                            Opacity="0">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="OpenStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition From="Open" GeneratedDuration="0:0:0.3" To="Closed" />
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Closed">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="Root">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.4" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Open">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"
                                                                       Storyboard.TargetName="Root">
                                            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Padding="{TemplateBinding Padding}">
                            <Border.Resources>
                                <Storyboard x:Key="Visible State" />
                                <Storyboard x:Key="Normal State" />
                            </Border.Resources>
                            <Border.Background>
                                <DynamicResource ResourceKey="WhiteBrush" />
                            </Border.Background>
                            <ContentPresenter Cursor="{TemplateBinding Cursor}"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              Margin="{TemplateBinding Padding}" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBlock" x:Key="TextBlockTrimmedTooltip" BasedOn="{StaticResource MetroTextBlock}">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="extensions:TextBlockTrimmedTooltip.AutomaticToolTipEnabled" Value="True" />
                    <Condition Property="extensions:TextBlockTrimmedTooltip.IsTextTrimmed" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={x:Static RelativeSource.Self}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SixTextBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource TextBlockTrimmedTooltip}" />
    <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource SixTextBlock}" />

    <Style TargetType="{x:Type controls:MetroWindow}" BasedOn="{StaticResource {x:Type controls:MetroWindow}}">
        <Setter Property="TitleCaps" Value="False" />
        <Setter Property="GlowBrush" Value="{DynamicResource SixLightGray}" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="FontFamily" Value="{StaticResource DefaultFont}" />
    </Style>

    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource MetroTabItem}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MetroComboBox}">
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
    </Style>

    <!--    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontWeight" Value="Light" />
        <Setter Property="Height" Value="30" />
    </Style>
    
    -->

    <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MetroDataGrid}">
        <!-- <Setter Property="ColumnHeaderStyle" Value="{StaticResource {ComponentResourceKey 
           TypeInTargetAssembly={x:Type filter:DataGridHeaderFilterControl}, 
           ResourceId=DataGridHeaderFilterControlStyle}}"> </Setter> -->
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="RowBackground" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="AlternatingRowBackground" Value="{StaticResource SixMediumGray}" />
        <Setter Property="AutoGenerateColumns" Value="False" />
        <Setter Property="RowHeight" Value="20" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="CanUserDeleteRows" Value="False" />
        <Setter Property="behaviors:DataGridBehavior.EnableContextMenuWorkaround" Value="True" />
        <!--
        <Setter Property="HorizontalGridLinesBrush" Value="#f0f0f0" />
        <Setter Property="VerticalGridLinesBrush" Value="#f0f0f0" />
-->
        <Setter Property="RowDetailsVisibilityMode" Value="Collapsed" />
        <!-- <Setter Property="SelectionUnit" Value="CellOrRowHeader" /> -->
        <!-- <Setter Property="EnableRowVirtualization" Value="False" /> -->
    </Style>

    <Style x:Key="DataGridLightStyle" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="AlternatingRowBackground" Value="{StaticResource SixSoftGray}" />
    </Style>

    <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource MetroListBox}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel" />
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <!-- Using Margin in GroupStyle causes scroll freeze http://connect.microsoft.com/VisualStudio/feedback/details/765682/freeze-when-using-virtualizingpanel-isvirtualizingwhengrouping-on-wpf-datagrid -->
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="behaviors:ListBoxExtenders.AutoScrollToCurrentItem" Value="True" />
        <!--  Causes issues on rendering in Chat messages, so disabled there.
              Also doesn't seem to help memory usage significantly when scrolling through large lists,
              But definitely appears to improve scrolling performance -->
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MetroListBoxItem}">
        <Setter Property="BorderThickness" Value="0 0 0 4" /> <!-- use at bottom for the selection awesome effect -->
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <!-- <Setter Property="HorizontalContentAlignment" Value="Stretch" /> -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource IdealForegroundColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="BorderBrush" Value="{DynamicResource AccentColorBrush3}" />
                            <!--                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />-->

                            <!--
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />
-->
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush7}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled"
                                           Value="False" />
                                <Condition Property="IsSelected"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource GrayBrush7}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource AccentSelectedColorBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush2}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource MetroTreeViewItem}">
        <Setter Property="behaviors:TreeViewItemBehavior.IsBroughtIntoViewWhenSelected" Value="True" />
        <Setter Property="BorderThickness" Value="0 0 0 2" /> <!-- use at bottom for the selection awesome effect -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                MinHeight="{TemplateBinding MinHeight}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid
                                Margin="{Binding Converter={StaticResource LengthConverter}, RelativeSource={x:Static RelativeSource.TemplatedParent}}"
                                VerticalAlignment="Stretch">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="19" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="Expander"
                                              Style="{StaticResource ExpandCollapseToggleStyle}"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                              ClickMode="Press" />

                                <ContentPresenter x:Name="PART_Header"
                                                  Grid.Column="1"
                                                  ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost">
                            <ItemsPresenter.LayoutTransform>
                                <ScaleTransform ScaleY="1" />
                            </ItemsPresenter.LayoutTransform>
                        </ItemsPresenter>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="False">
                            <Setter TargetName="ItemsHost"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="HasItems"
                                 Value="False">
                            <Setter TargetName="Expander"
                                    Property="Visibility"
                                    Value="Hidden" />
                        </Trigger>

                        <Trigger SourceName="Border"
                                 Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource AccentColorBrush3}" />
                            <!--                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />-->
                            <!--
                            <Setter Property="Foreground"
                                    Value="{DynamicResource BlackColorBrush}" />
-->
                        </Trigger>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource IdealForegroundColorBrush}" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush7}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled"
                                           Value="False" />
                                <Condition Property="IsSelected"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter TargetName="Border"
                                        Property="Background"
                                        Value="{DynamicResource GrayBrush7}" />
                                <Setter Property="Foreground"
                                        Value="{DynamicResource AccentSelectedColorBrush}" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush2}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource MetroExpander}">
        <Style.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter Property="Background" Value="{StaticResource SixGray}" />
                <Setter Property="BorderBrush" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="MenuItemBase" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MetroMenuItem}">
        <Setter Property="BorderThickness" Value="0" />
        <!--
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
-->
        <Setter Property="Padding" Value="0" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="IsSubmenuOpen" Value="{Binding IsOpen}" />
        <Setter Property="Icon" Value="{Binding Icon, Converter={StaticResource IconControlConverter}}" />
        <Setter Property="Visibility"
                Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
    </Style>

    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemBase}">
        <Setter Property="Header" Value="{Binding Name, Mode=OneWay}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSeparator}" Value="True">
                <Setter Property="Header">
                    <Setter.Value>
                        <Separator />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ContextMenuBase" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource MetroContextMenu}">
        <!--        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />-->
        <Setter Property="IsOpen" Value="{Binding IsOpen}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource ContextMenuBase}" />


    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="Black" StrokeThickness="1"
                               StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" x:Key="CustomToggleButtonBaseStyle">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              RecognizesAccessKey="True" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CustomToggleButtonBaseStyle}" />
</ResourceDictionary>