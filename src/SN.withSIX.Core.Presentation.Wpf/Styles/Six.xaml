<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:behaviors="clr-namespace:SN.withSIX.Core.Presentation.Wpf.Behaviors"
                    xmlns:controls2="clr-namespace:SN.withSIX.Core.Presentation.Wpf.Views.Controls"
                    xmlns:core="clr-namespace:SN.withSIX.Core.Applications;assembly=SN.withSIX.Core.Applications"
                    xmlns:viewModels="clr-namespace:SN.withSIX.Core.Applications.MVVM.ViewModels;assembly=SN.withSIX.Core.Applications.MVVM">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="CoreOverrides.xaml" />
        <ResourceDictionary Source="CoreControls.xaml" />
        <ResourceDictionary Source="Icons.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- <Thickness  x:Key="CommonMargin" Left="0" Right="14" Top="6" Bottom="0" /> -->

    <s:String x:Key="formatDate">{0:MMMM dd HH:mm:ss}</s:String>
    <s:String x:Key="formatDateOnly">
        {0:dddd MMMM dd, yyyy}
    </s:String>
    <s:String x:Key="formatDateLong">
        {0:dddd MMMM dd, yyyy HH:mm:ss}
    </s:String>

    <Style x:Key="ColorButton" BasedOn="{StaticResource MetroFlatButton}" TargetType="{x:Type Button}">
        <Setter Property="Foreground" Value="White" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource SixGray}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="AccentButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
    </Style>

    <Style x:Key="BlackButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{DynamicResource BlackBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteBrush}" />
    </Style>

    <Style x:Key="WhiteButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
    </Style>

    <Style x:Key="BlueButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixBlue}" />
    </Style>

    <Style x:Key="GreenButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixGreen}" />
    </Style>

    <Style x:Key="OrangeButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixOrange}" />
    </Style>

    <Style x:Key="RedButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixSoftRed}" />
    </Style>

    <!-- We dont want to use a Gray Button if we already use Gray as a disabled state for a button!
    <Style x:Key="GrayButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ColorButton}">
        <Setter Property="Background" Value="{StaticResource SixGray}" />
    </Style>
-->

    <Style TargetType="{x:Type Button}" x:Key="ButtonBaseStyle">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <Grid Background="{TemplateBinding Background}">
                            <ContentPresenter x:Name="contentPresenter"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              RecognizesAccessKey="True"
                                              Opacity="{TemplateBinding Opacity}" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="CustomButtonBaseStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ButtonBaseStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="0.75" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#ADADAD" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BigButton" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonBaseStyle}">
        <Setter Property="FontSize" Value="32" />
        <Setter Property="Padding" Value="24" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonBaseStyle}"
           x:Key="CustomChromelessButtonStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="1" />
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomChromelessButtonStyle}"
           x:Key="MetroTextButtonStyle">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsEnabled" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Cursor" Value="Hand" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ImageButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="TopButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Padding" Value="4" />
        <Setter Property="MinWidth" Value="32" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="BorderBrush" Value="{StaticResource SixSoftGray}" />
        <Setter Property="BorderThickness" Value="2" />
    </Style>

    <Style x:Key="ImageButtonReverseStyle" TargetType="{x:Type Button}"
           BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Opacity" Value="0.75" />
        <Setter Property="Padding" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="#ADADAD" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource CustomToggleButtonBaseStyle}"
           x:Key="MetroTextToggleButtonStyle">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="1" />
    </Style>

    <Style x:Key="ButtonClickToCopyStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource MetroTextButtonStyle}">
        <Setter Setter.Property="Control.Template">
            <Setter.Value>
                <ControlTemplate ControlTemplate.TargetType="{x:Type ButtonBase}">
                    <Grid Grid.Name="grid" FrameworkElement.HorizontalAlignment="Left">
                        <ContentPresenter ContentPresenter.Name="contentPresenter"
                                          FrameworkElement.HorizontalAlignment="Left" />
                        <TextBlock Name="ClickToCopy" HorizontalAlignment="Right" Padding="24,0,0,0" Margin="0,-1,0,1"
                                   VerticalAlignment="Stretch" Text="click to copy" Opacity="0">
                            <TextBlock.Background>
                                <LinearGradientBrush EndPoint="1,0.5" StartPoint="0,0.5">
                                    <GradientStop Offset="0" />
                                    <GradientStop Color="{DynamicResource WhiteColor}" Offset="0.238" />
                                </LinearGradientBrush>
                            </TextBlock.Background>
                        </TextBlock>
                        <Border Name="Border" BorderBrush="{StaticResource SixSoftGray}" BorderThickness="0,0,0,1"
                                Opacity="0" Margin="0" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Opacity" Value="1" />
                            <Setter TargetName="ClickToCopy" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="WindowButtonStyle" TargetType="{x:Type Button}"
           BasedOn="{StaticResource CustomChromelessButtonStyle}">
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="Height" Value="32" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
    </Style>


    <Style x:Key="ImageToggleButtonStyle" TargetType="{x:Type ToggleButton}"
           BasedOn="{StaticResource MetroTextToggleButtonStyle}">
        <Setter Property="Padding" Value="0" />
    </Style>

    <Style x:Key="RefreshButtonStyle" BasedOn="{StaticResource ImageButtonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border IsHitTestVisible="True" x:Name="grid" Background="Transparent">
                        <Viewbox MaxWidth="24" MaxHeight="24" x:Name="contentPresenter">
                            <Canvas Width="12.500" Height="15.000">
                                <!-- Ebene 1/<Group>/<Path> -->
                                <Path Fill="{TemplateBinding Foreground}" Opacity="{TemplateBinding Opacity}"
                                      Data="F1 M 5.282,5.368 L 7.966,2.684 L 5.282,0.000 L 4.412,0.871 L 5.609,2.068 L 3.126,2.068 L 0.000,7.484 L 2.949,12.594 L 4.015,11.976 L 1.424,7.484 L 3.836,3.299 L 5.609,3.299 L 4.412,4.498 L 5.282,5.368 Z" />

                                <!-- Ebene 1/<Group>/<Path> -->
                                <Path Fill="{TemplateBinding Foreground}" Opacity="{TemplateBinding Opacity}"
                                      Data="F1 M 12.500,7.516 L 9.551,2.406 L 8.485,3.024 L 11.076,7.516 L 8.664,11.701 L 6.891,11.701 L 8.088,10.502 L 7.218,9.632 L 4.534,12.316 L 7.218,15.000 L 8.088,14.129 L 6.891,12.932 L 9.374,12.932 L 12.500,7.516 Z" />
                            </Canvas>
                        </Viewbox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="0.75" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ProgressButtonStyle" TargetType="{x:Type Button}"
           BasedOn="{StaticResource ImageButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource SixGreen}" />
            </Trigger>
        </Style.Triggers>
        <Style.Setters>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                            <Grid Background="{TemplateBinding Background}">
                                <ContentPresenter
                                    Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    RecognizesAccessKey="True" />
                                <controls:ProgressRing IsActive="True" Foreground="{StaticResource SixGreen}"
                                                       Width="{TemplateBinding FontSize}"
                                                       Height="{TemplateBinding FontSize}"
                                                       Visibility="{TemplateBinding IsEnabled, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, ConverterParameter=True}"
                                                       HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                       SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
    </Style>

    <Style x:Key="TextBlockIconStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style x:Key="ContextMenuColorButton" TargetType="{x:Type Button}"
           BasedOn="{StaticResource ColorButton}">
        <Setter Property="behaviors:ContextMenuButtonBehavior.IsEnabled" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock Text="{x:Static core:SixIconFont.withSIX_icon_Share_Lines}"
                           Style="{StaticResource TextBlockIconStyle}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ContextMenuButton" TargetType="{x:Type Button}"
           BasedOn="{StaticResource ImageButtonStyle}">
        <Setter Property="behaviors:ContextMenuButtonBehavior.IsEnabled" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock Text="{x:Static core:SixIconFont.withSIX_icon_Share_Lines}"
                           Style="{StaticResource TextBlockIconStyle}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ShellBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0 2 0 2" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
    </Style>

    <Style x:Key="GoldenGridStyle" TargetType="{x:Type controls2:GutterGrid}">
        <Setter Property="NumberOfColumns" Value="16" />
        <Setter Property="NumberOfRows" Value="12" />
        <Setter Property="ColumnGutterWidth" Value="*" />
        <Setter Property="RowGutterWidth" Value="*" />
    </Style>

    <Style x:Key="GoldenGridStyle2" TargetType="{x:Type controls2:GutterGridNoOutsideGutters}">
        <Setter Property="NumberOfColumns" Value="16" />
        <Setter Property="NumberOfRows" Value="12" />
        <Setter Property="ColumnGutterWidth" Value="*" />
        <Setter Property="RowGutterWidth" Value="*" />
    </Style>

    <Style x:Key="GridColumnStyle" TargetType="{x:Type Grid}">
        <Setter Property="controls2:GutterGrid.ColumnSpan" Value="4" />
        <Setter Property="controls2:GutterGrid.RowSpan" Value="12" />
    </Style>

    <Style x:Key="HeaderTextStyle" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="32" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="HeaderTextBoxStyle" TargetType="{x:Type TextBox}"
           BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="FontSize" Value="32" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="SubHeaderTextStyle" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="24" />
        <Setter Property="VerticalAlignment" Value="Top" />
    </Style>

    <Style x:Key="TitleTextStyle" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="FontWeight" Value="Normal" />
    </Style>

    <Style x:Key="SubTitleTextStyle" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="15" />
        <Setter Property="FontStyle" Value="Italic" />
    </Style>

    <Style x:Key="StatusTextStyle" TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontSize" Value="12" />
    </Style>

    <Style x:Key="GrayBorderLine" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="0,0,0,4" />
        <Setter Property="BorderBrush" Value="{StaticResource SixSoftGray}" />
    </Style>

    <Style x:Key="TabHeaderLeft" TargetType="{x:Type Polygon}">
        <Setter Property="Points" Value="0,0 16,0, 0,32" />
        <Setter Property="Fill" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Margin" Value="-8,-1,2,0" />
    </Style>

    <Style x:Key="TabHeaderRight" TargetType="{x:Type Polygon}">
        <Setter Property="Points" Value="0,0 16,0, 16,32" />
        <Setter Property="Fill" Value="{DynamicResource WhiteBrush}" />
        <Setter Property="Margin" Value="2,-1,-8,0" />
    </Style>

    <Style x:Key="NoSelectionListBoxItemStyle" TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected"
                                 Value="True">
                            <!--                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}" />-->
                            <!--
                            <Setter Property="Foreground"
                                    Value="{DynamicResource IdealForegroundColorBrush}" />
-->
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                            <!--
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush3}" />
-->
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter Property="Foreground"
                                    Value="{DynamicResource GrayBrush7}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled"
                                           Value="False" />
                                <Condition Property="IsSelected"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource GrayBrush7}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource AccentSelectedColorBrush}" />
                        </MultiTrigger>
                        <!--                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected"
                                           Value="True" />
                                <Condition Property="Selector.IsSelectionActive"
                                           Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush2}" />
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightAlignStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Padding" Value="5,0" />
    </Style>

    <Style x:Key="LeftAlignStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Padding" Value="5,0" />
    </Style>

    <Style x:Key="ModalUserControlStyle" TargetType="{x:Type UserControl}">
        <Setter Property="Foreground" Value="{StaticResource SixSoftGray}" />
        <Setter Property="Margin" Value="12" />
    </Style>

    <Style TargetType="{x:Type DockPanel}" x:Key="BottomMenu">
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="36 0 0 0" />
        <Setter Property="behaviors:MarginSetter.Margin" Value="0 0 16 0" />
    </Style>

    <Style x:Key="MenuItemButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource ImageButtonStyle}">
        <Setter Property="Visibility"
                Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
        <Setter Property="IsEnabled"
                Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}" />
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="ClickMode" Value="Release" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
    </Style>


    <DataTemplate x:Key="MenuItemTemplate" DataType="viewModels:MenuItem">
        <Button Style="{StaticResource MenuItemButtonStyle}" Height="32">
            <DockPanel Margin="8 0">
                <controls2:IconControlInheritForeground Margin="0 0 8 0"
                                                        VerticalAlignment="Center"
                                                        Icon="{Binding Icon, Converter={StaticResource IconControlConverter}}"
                                                        Height="12"
                                                        Visibility="{Binding Icon, Converter={StaticResource NotNullToVisibilityConverter}}" />
                <TextBlock Text="{Binding Name}"
                           HorizontalAlignment="Left" VerticalAlignment="Center"
                           IsHitTestVisible="False" />
            </DockPanel>
        </Button>
    </DataTemplate>

    <Style x:Key="ToolBarButtonBaseTemplate" TargetType="{x:Type Button}"
           BasedOn="{StaticResource MenuItemButtonStyle}">
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderBrush" Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="BorderThickness" Value="0 0 0 2" />
    </Style>

    <Style x:Key="ToolBarButtonTemplate" TargetType="{x:Type Button}"
           BasedOn="{StaticResource ToolBarButtonBaseTemplate}">
        <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </Style>

    <DataTemplate x:Key="ToolBarItemTemplate" DataType="viewModels:MenuItem">
        <Button Margin="8 0" Style="{StaticResource ToolBarButtonTemplate}" Height="24">
            <DockPanel>
                <controls2:IconControlInheritForeground Margin="0 0 8 0"
                                                        VerticalAlignment="Center"
                                                        Icon="{Binding Icon, Converter={StaticResource IconControlConverter}}"
                                                        Height="12"
                                                        Visibility="{Binding Icon, Converter={StaticResource NotNullToVisibilityConverter}}" />

                <TextBlock Text="{Binding Name}"
                           HorizontalAlignment="Left" VerticalAlignment="Center"
                           IsHitTestVisible="False" />
            </DockPanel>
        </Button>
    </DataTemplate>

    <Style x:Key="ToolBarOverflowButtonStyle"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle"
                Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Name="Bd"
                            CornerRadius="0,3,3,0"
                            Background="Transparent"
                            SnapsToDevicePixels="true">
                        <Grid>
                            <Border BorderBrush="White" BorderThickness="0 0 0 2">
                                <TextBlock VerticalAlignment="Center" x:Name="panel">
                                    <Run Text="{x:Static core:SixIconFont.withSIX_icon_Share_Dots}"
                                         FontFamily="{StaticResource IconFont}" />
                                    <Run Text="More" />
                                </TextBlock>
                            </Border>
                            <ContentPresenter />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="panel" Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                            <Setter Property="Visibility" Value="Hidden" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="ToolBarStyle" TargetType="{x:Type ToolBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource IdealForegroundColorBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="ItemTemplate" Value="{StaticResource ToolBarItemTemplate}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Setter Property="behaviors:ToolBarCloseBehavior.IsEnabled" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Border x:Name="Border"
                            CornerRadius="2"
                            BorderThickness="0"
                            Background="{DynamicResource TransparentWhiteBrush}"
                            BorderBrush="{DynamicResource TransparentWhiteBrush}">
                        <DockPanel>
                            <ToggleButton DockPanel.Dock="Right"
                                          IsEnabled="{TemplateBinding HasOverflowItems}"
                                          Style="{StaticResource ToolBarOverflowButtonStyle}"
                                          IsChecked="{Binding Path=IsOverflowOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press">
                                <Popup x:Name="OverflowPopup"
                                       AllowsTransparency="true"
                                       Placement="Bottom"
                                       IsOpen="{Binding Path=IsOverflowOpen,RelativeSource={RelativeSource TemplatedParent}}"
                                       StaysOpen="false"
                                       Focusable="false"
                                       PopupAnimation="Slide">
                                    <Border x:Name="DropDownBorder"
                                            Background="{DynamicResource ControlBackgroundBrush}"
                                            BorderThickness="1"
                                            BorderBrush="{DynamicResource ControlBorderBrush}">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel"
                                                              Margin="0"
                                                              WrapWidth="10"
                                                              Focusable="true"
                                                              FocusVisualStyle="{x:Null}"
                                                              KeyboardNavigation.TabNavigation="Cycle"
                                                              KeyboardNavigation.DirectionalNavigation="Cycle">
                                            <ToolBarOverflowPanel.Resources>
                                                <SolidColorBrush x:Key="BlackBrush"
                                                                 Color="{DynamicResource BlackColor}" />
                                                <SolidColorBrush x:Key="ForegroundBrush"
                                                                 Color="{DynamicResource BlackColor}" />
                                                <SolidColorBrush x:Key="BorderBrush" Color="Transparent" />
                                            </ToolBarOverflowPanel.Resources>
                                        </ToolBarOverflowPanel>
                                    </Border>
                                </Popup>
                            </ToggleButton>

                            <Thumb x:Name="ToolBarThumb"
                                   Style="{DynamicResource ToolBarThumbStyle}"
                                   Width="10" />

                            <ToolBarPanel x:Name="PART_ToolBarPanel" Margin="0"
                                          IsItemsHost="true" />
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen"
                                 Value="true">
                            <Setter TargetName="ToolBarThumb"
                                    Property="IsEnabled"
                                    Value="false" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked"
                                 Value="true">
                            <Setter TargetName="ToolBarThumb"
                                    Property="Visibility"
                                    Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Resources>
            <SolidColorBrush x:Key="BlackBrush" Color="{DynamicResource IdealForegroundColor}" />
            <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource IdealForegroundColor}" />
            <SolidColorBrush x:Key="ForegroundBrush" Color="{DynamicResource IdealForegroundColor}" />
        </Style.Resources>
    </Style>

    <DataTemplate x:Key="BottomMenuTemplate" DataType="{x:Type viewModels:MenuItem}">
        <!-- NOTE: By using the DataContext property directly we may end up with MS.Internal.NamedObject, the handling code has to account for this -->
        <Button Style="{StaticResource ImageButtonStyle}" Foreground="{DynamicResource WhiteBrush}"
                Command="{Binding Command}"
                CommandParameter="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}"
                Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                IsEnabled="{Binding IsEnabled}" Margin="0 0 16 0">
            <Button.Template>
                <ControlTemplate>
                    <DockPanel>
                        <ContentPresenter Content="{Binding Icon, Converter={StaticResource IconControlConverter}}"
                                          MaxHeight="16" MaxWidth="16">
                            <ContentPresenter.Resources>
                                <Style TargetType="{x:Type Path}">
                                    <Setter Property="Fill" Value="{DynamicResource WhiteBrush}" />
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                        <TextBlock Margin="4 0 0 0" VerticalAlignment="Center"
                                   Text="{Binding Name}"
                                   Foreground="{TemplateBinding Foreground}" />
                    </DockPanel>
                </ControlTemplate>
            </Button.Template>
        </Button>
    </DataTemplate>

    <ItemsPanelTemplate x:Key="BottomMenuPanel">
        <DockPanel Style="{StaticResource BottomMenu}" IsItemsHost="True" behaviors:MarginSetter.Margin="0" />
    </ItemsPanelTemplate>

    <Style x:Key="BottomMenuStyle" TargetType="{x:Type ItemsControl}">
        <Setter Property="ItemTemplate" Value="{StaticResource BottomMenuTemplate}" />
        <Setter Property="ItemsPanel" Value="{StaticResource BottomMenuPanel}" />
    </Style>

    <Style x:Key="SlimListboxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">

                    <Border x:Name="BottomBorder"
                            IsEnabled="{Binding IsEnabled}"
                            Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityCollapsedConverter}}"
                            BorderBrush="{StaticResource SixSoftGray}" BorderThickness="0,0,0,2"
                            Background="{DynamicResource WhiteBrush}">
                        <ContentPresenter x:Name="MainContent"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BottomBorder"
                                    Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                            <Setter TargetName="MainContent"
                                    Property="Opacity" Value="0.5" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="PopupMenuBaseStyle" TargetType="{x:Type Popup}">
        <Setter Property="IsOpen" Value="{Binding IsOpen}" />
        <Setter Property="StaysOpen" Value="False" />
        <Setter Property="Height" Value="Auto" />
        <Setter Property="MaxHeight" Value="768" />
        <Setter Property="AllowsTransparency" Value="True" />
        <Setter Property="Placement" Value="Bottom" />
    </Style>

    <Style x:Key="PopupMenuStyle" BasedOn="{StaticResource PopupMenuBaseStyle}" TargetType="Popup">
        <Setter Property="PlacementRectangle" Value="-42,34,160,0" />
        <Setter Property="behaviors:PopupMenuCloseBehavior.IsEnabled" Value="True" />
    </Style>

    <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=OneWayToSource}" />
        <Setter Property="Padding" Value="12 12 12 8" />
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Margin" Value="0 0 0 4" />
    </Style>

    <Style x:Key="ListBoxItemStyleFocused" TargetType="{x:Type ListBoxItem}"
           BasedOn="{StaticResource ListBoxItemStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
                <Setter Property="Background" Value="White" />
            </Trigger>
            <!--
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" />
            </Trigger>
-->
            <!-- TODO: Should have the IsFocused of the ListBox instead
                    does not give desired effect: <DataTrigger Binding="{Binding IsFocused, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBox}}">
                    -->
            <Trigger Property="IsFocused" Value="False">
                <Setter Property="BorderBrush" Value="White" />
                <Setter Property="Background" Value="White" />
                <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBox}" x:Key="InlineTextBox">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource SixSoftGray}" />

                <Setter Property="Cursor" Value="IBeam" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="0,2,0,2" />
        <Setter Property="Foreground" Value="{StaticResource SixSoftGray}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <SolidColorBrush x:Key="GlyphBrush" Color="#FF31347C" />
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle Margin="0,0,0,0" x:Name="Rectangle" Fill="Transparent" />
            <Path HorizontalAlignment="Center" x:Name="Up_Arrow" VerticalAlignment="Center"
                  Fill="{StaticResource GlyphBrush}" Data="M 0 0 L 4 4 L 8 0 Z" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="-90" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
            <Path Visibility="Collapsed" HorizontalAlignment="Center" x:Name="Down_Arrow" VerticalAlignment="Center"
                  Fill="{StaticResource GlyphBrush}" Data="M 0 4 L 4 0 L 8 4 Z" RenderTransformOrigin="0.5,0.5">
                <Path.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="1" ScaleY="1" />
                        <SkewTransform AngleX="0" AngleY="0" />
                        <RotateTransform Angle="135" />
                        <TranslateTransform X="0" Y="0" />
                    </TransformGroup>
                </Path.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="Down_Arrow" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="Up_Arrow" />
                <Setter Property="OpacityMask" TargetName="Down_Arrow" Value="#FF000000" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Foreground" Value="{DynamicResource TextBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition
                                x:Name="ContentRow"
                                Height="0" />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0"
                              Visibility="{TemplateBinding Header, Converter={StaticResource NotNullToVisibilityConverter}}">
                            <ToggleButton x:Name="tb" Margin="0 4 0 2"
                                          Background="Transparent"
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          HorizontalAlignment="Stretch"
                                          HorizontalContentAlignment="Stretch">
                                <Grid Background="Transparent">
                                    <Grid.Resources>
                                        <Style
                                            TargetType="{x:Type Viewbox}">
                                            <Setter
                                                Property="MaxHeight"
                                                Value="10" />
                                            <Style.Triggers>
                                                <DataTrigger
                                                    Binding="{Binding IsChecked, ElementName=tb}"
                                                    Value="True">
                                                    <Setter
                                                        Property="RenderTransform">
                                                        <Setter.Value>
                                                            <RotateTransform
                                                                Angle="180"
                                                                CenterX="5"
                                                                CenterY="5" />
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Resources>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition
                                            Width="*" />
                                        <ColumnDefinition
                                            Width="20" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter
                                        Grid.Column="0"
                                        ContentSource="Header"
                                        RecognizesAccessKey="True"
                                        HorizontalAlignment="Stretch" />
                                    <TextBlock Text="{x:Static core:SixIconFont.withSIX_icon_Arrow_Down_Dir}"
                                               Style="{StaticResource TextBlockIconStyle}"
                                               Grid.Column="1" HorizontalAlignment="Right" />
                                </Grid>
                            </ToggleButton>
                        </Grid>
                        <ContentPresenter Margin="0 4" x:Name="Content" Grid.Row="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded"
                                 Value="True">
                            <Setter TargetName="ContentRow"
                                    Property="Height"
                                    Value="{Binding DesiredHeight, ElementName=Content}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}"
           BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />
        <Setter Property="BorderThickness" Value="0 2 0 0" />
        <Setter Property="BorderBrush" Value="{StaticResource SixSoftGray}" />
        <!--
        <Setter Property="FontWeight" Value="Normal" />
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="FontWeight" Value="Bold" />
            </Trigger>
        </Style.Triggers>
        -->
    </Style>

    <Style x:Key="ViewboxMore" TargetType="{x:Type Viewbox}">
        <Setter Property="MaxHeight" Value="18" />
        <Style.Resources>
            <Style TargetType="{x:Type Path}">
                <Setter Property="Fill" Value="{StaticResource SixSoftGray}" />
            </Style>
        </Style.Resources>
    </Style>

    <Style x:Key="ProfileImageStyle" TargetType="{x:Type Image}">
        <Setter Property="MaxHeight" Value="48" />
        <Setter Property="MaxWidth" Value="48" />
    </Style>
    <Style x:Key="ProfileGridStyle" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{StaticResource SixLightGray}" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
    </Style>

    <Style TargetType="{x:Type CheckBox}" x:Key="TriStateCheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="hover" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="pressed" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To=".55"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="contentPresenter" />
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="checkBox" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="indeterminate" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="focused" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                                       Storyboard.TargetName="ValidationErrorElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="InvalidFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                                       Storyboard.TargetName="ValidationErrorElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                                                                       Storyboard.TargetName="validationTooltip">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <s:Boolean>True</s:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="18" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Fill="{DynamicResource TransparentWhiteBrush}" />
                        <Rectangle x:Name="normal"
                                   Opacity="1"
                                   Stroke="{DynamicResource CheckBoxBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="hover"
                                   Stroke="{DynamicResource CheckBoxMouseOverBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Opacity="0"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="pressed"
                                   Opacity="0"
                                   Stroke="{DynamicResource HighlightBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="focused"
                                   Opacity="0"
                                   Stroke="{DynamicResource HighlightBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Border x:Name="ValidationErrorElement"
                                BorderBrush="{DynamicResource ControlsValidationBrush}"
                                BorderThickness="1"
                                CornerRadius="1"
                                ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed"
                                Width="18"
                                Height="18">
                            <ToolTipService.ToolTip>
                                <ToolTip x:Name="validationTooltip"
                                         DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                         Placement="Right"
                                         PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                         Template="{DynamicResource ValidationToolTipTemplate}">
                                    <ToolTip.Triggers>
                                        <EventTrigger RoutedEvent="Canvas.Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames
                                                        Storyboard.TargetProperty="IsHitTestVisible"
                                                        Storyboard.TargetName="validationTooltip">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <s:Boolean>true</s:Boolean>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </ToolTip.Triggers>
                                </ToolTip>
                            </ToolTipService.ToolTip>
                            <Grid Background="Transparent"
                                  HorizontalAlignment="Right"
                                  Height="10"
                                  Margin="0,-4,-4,0"
                                  VerticalAlignment="Top"
                                  Width="10">
                                <Path Data="M 1,0 L5,0 A 2,2 90 0 1 7,2 L7,6 z"
                                      Fill="{DynamicResource ValidationBrush5}"
                                      Margin="0,3,0,0" />
                                <Path Data="M 0,0 L2,0 L 7,5 L7,7"
                                      Fill="{DynamicResource WhiteBrush}"
                                      Margin="0,3,0,0" />
                            </Grid>
                        </Border>
                        <Path x:Name="checkBox"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              Data="M 1145.607177734375,430 C1145.607177734375,430 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1141.449951171875,435.0772705078125 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1139.232177734375,433.0999755859375 1138,434.5538330078125 1138,434.5538330078125 1138,434.5538330078125 1141.482177734375,438 1141.482177734375,438 1141.482177734375,438 1141.96875,437.9375 1141.96875,437.9375 1141.96875,437.9375 1147,431.34619140625 1147,431.34619140625 1147,431.34619140625 1145.607177734375,430 1145.607177734375,430 z"
                              Fill="{StaticResource SixGreen}"
                              UseLayoutRounding="False" />
                        <Path x:Name="indeterminate"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              Data="F1M1440.351,1170.416L1440.351,1170.416 1170.351,1440.416 720.351,990.416 270.351,1440.416 0.351,1170.416 450.351,720.416 0.351,270.417 270.351,0.417 720.351,450.417 1170.351,0.417 1440.351,270.417 990.351,720.416z"
                              Fill="{StaticResource SixSoftRed}"
                              UseLayoutRounding="False" />
                        <Path x:Name="disabled"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              UseLayoutRounding="False" />
                        <Rectangle x:Name="IndeterminateCheck"
                                   Opacity="0"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource SemiTransparentWhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          Grid.Column="1"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type CheckBox}" x:Key="ReversedCheckBoxStyle" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="hover" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="pressed" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To=".55"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="contentPresenter" />
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="CheckStates">
                                <VisualState x:Name="Checked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="checkBox" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unchecked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="disabled" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="indeterminate" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0"
                                                         To="1"
                                                         Storyboard.TargetProperty="(UIElement.Opacity)"
                                                         Storyboard.TargetName="focused" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Unfocused" />
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="ValidationStates">
                                <VisualState x:Name="Valid" />
                                <VisualState x:Name="InvalidUnfocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                                       Storyboard.TargetName="ValidationErrorElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="InvalidFocused">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility"
                                                                       Storyboard.TargetName="ValidationErrorElement">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                                                                       Storyboard.TargetName="validationTooltip">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <s:Boolean>True</s:Boolean>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="18" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Rectangle Fill="{DynamicResource TransparentWhiteBrush}" />
                        <Rectangle x:Name="normal"
                                   Opacity="1"
                                   Stroke="{DynamicResource CheckBoxBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="hover"
                                   Stroke="{DynamicResource CheckBoxMouseOverBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Opacity="0"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="pressed"
                                   Opacity="0"
                                   Stroke="{DynamicResource HighlightBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Rectangle x:Name="focused"
                                   Opacity="0"
                                   Stroke="{DynamicResource HighlightBrush}"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource WhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <Border x:Name="ValidationErrorElement"
                                BorderBrush="{DynamicResource ControlsValidationBrush}"
                                BorderThickness="1"
                                CornerRadius="1"
                                ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                Visibility="Collapsed"
                                Width="18"
                                Height="18">
                            <ToolTipService.ToolTip>
                                <ToolTip x:Name="validationTooltip"
                                         DataContext="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                         Placement="Right"
                                         PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                         Template="{DynamicResource ValidationToolTipTemplate}">
                                    <ToolTip.Triggers>
                                        <EventTrigger RoutedEvent="Canvas.Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <ObjectAnimationUsingKeyFrames
                                                        Storyboard.TargetProperty="IsHitTestVisible"
                                                        Storyboard.TargetName="validationTooltip">
                                                        <DiscreteObjectKeyFrame KeyTime="0">
                                                            <DiscreteObjectKeyFrame.Value>
                                                                <s:Boolean>true</s:Boolean>
                                                            </DiscreteObjectKeyFrame.Value>
                                                        </DiscreteObjectKeyFrame>
                                                    </ObjectAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </ToolTip.Triggers>
                                </ToolTip>
                            </ToolTipService.ToolTip>
                            <Grid Background="Transparent"
                                  HorizontalAlignment="Right"
                                  Height="10"
                                  Margin="0,-4,-4,0"
                                  VerticalAlignment="Top"
                                  Width="10">
                                <Path Data="M 1,0 L5,0 A 2,2 90 0 1 7,2 L7,6 z"
                                      Fill="{DynamicResource ValidationBrush5}"
                                      Margin="0,3,0,0" />
                                <Path Data="M 0,0 L2,0 L 7,5 L7,7"
                                      Fill="{DynamicResource WhiteBrush}"
                                      Margin="0,3,0,0" />
                            </Grid>
                        </Border>
                        <Path x:Name="checkBox"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              Data="F1M1440.351,1170.416L1440.351,1170.416 1170.351,1440.416 720.351,990.416 270.351,1440.416 0.351,1170.416 450.351,720.416 0.351,270.417 270.351,0.417 720.351,450.417 1170.351,0.417 1440.351,270.417 990.351,720.416z"
                              Fill="{StaticResource SixSoftRed}"
                              UseLayoutRounding="False" />
                        <Path x:Name="indeterminate"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              Data="F1M1440.351,1170.416L1440.351,1170.416 1170.351,1440.416 720.351,990.416 270.351,1440.416 0.351,1170.416 450.351,720.416 0.351,270.417 270.351,0.417 720.351,450.417 1170.351,0.417 1440.351,270.417 990.351,720.416z"
                              Fill="{StaticResource SixSoftRed}"
                              UseLayoutRounding="False" />
                        <Path x:Name="disabled"
                              Height="10"
                              Width="12"
                              Stretch="Fill"
                              Opacity="0"
                              UseLayoutRounding="False" />
                        <Rectangle x:Name="IndeterminateCheck"
                                   Opacity="0"
                                   StrokeThickness="1"
                                   Fill="{DynamicResource SemiTransparentWhiteBrush}"
                                   Width="18"
                                   Height="18" />
                        <ContentPresenter x:Name="contentPresenter"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          Grid.Column="1"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="ContentStateTreeIconStyle">
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="ToolTip" Value="{Binding}" />
        <Setter Property="Text" Value="{x:Static core:SixIconFont.withSIX_icon_Hexagon}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="UpdateAvailable">
                <Setter Property="Foreground" Value="{StaticResource SixOrange}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="Unverified">
                <Setter Property="Foreground" Value="{StaticResource SixYellow}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding}" Value="Incompatible">
                <Setter Property="Foreground" Value="{StaticResource SixSoftRed}" />
            </DataTrigger>
            <!--
            <DataTrigger Binding="{Binding}" Value="NotInstalled">

            </DataTrigger>
-->
            <DataTrigger Binding="{Binding}" Value="Uptodate">
                <Setter Property="Foreground" Value="{StaticResource SixGreen}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="Local">
                <Setter Property="Text" Value="{x:Static core:SixIconFont.withSIX_icon_System}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="ContentStateIconStyle">
        <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
        <Setter Property="ToolTip" Value="{Binding}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Text" Value="{x:Static core:SixIconFont.withSIX_icon_Hexagon_Download}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding}" Value="UpdateAvailable">
                <Setter Property="Foreground" Value="{StaticResource SixOrange}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="Unverified">
                <Setter Property="Foreground" Value="{StaticResource SixYellow}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="Incompatible">
                <Setter Property="Foreground" Value="{StaticResource SixSoftRed}" />
            </DataTrigger>
            <!--
            <DataTrigger Binding="{Binding}" Value="NotInstalled">
            </DataTrigger>
-->
            <DataTrigger Binding="{Binding}" Value="Uptodate">
                <Setter Property="Foreground" Value="{StaticResource SixGreen}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding}" Value="Local">
                <Setter Property="Text" Value="{x:Static core:SixIconFont.withSIX_icon_System}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>