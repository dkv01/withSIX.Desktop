<wpf:SingleInstanceApp x:Class="withSIX.Play.Presentation.Wpf.PlayApp"
                       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                       ShutdownMode="OnExplicitShutdown"
                       xmlns:core1="clr-namespace:SN.withSIX.Core.Applications;assembly=withSIX.Core.Applications"
                       xmlns:converters="http://metro.mahapps.com/winfx/xaml/shared"
                       xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation"
                       xmlns:games1="clr-namespace:SN.withSIX.Play.Applications.ViewModels.Games.Library;assembly=withSIX.Play.Applications"
                       xmlns:wpf="clr-namespace:SN.withSIX.Core.Presentation.Wpf;assembly=withSIX.Core.Presentation.Wpf"
                       xmlns:wpf1="clr-namespace:SN.withSIX.Play.Presentation.Wpf"
                       xmlns:chat="clr-namespace:SN.withSIX.Play.Presentation.Wpf.Helpers.RichTextBox.Formatters.Chat"
                       xmlns:controls="clr-namespace:SN.withSIX.Play.Presentation.Wpf.Views.Controls"
                       xmlns:extensions="clr-namespace:SN.withSIX.Core.Presentation.Wpf.Extensions;assembly=withSIX.Core.Presentation.Wpf"
                       xmlns:behaviors="clr-namespace:SN.withSIX.Core.Presentation.Wpf.Behaviors;assembly=withSIX.Core.Presentation.Wpf"
                       xmlns:library="clr-namespace:SN.withSIX.Play.Presentation.Wpf.Views.Games.Library"
                       xmlns:behaviors1="clr-namespace:SN.withSIX.Play.Presentation.Wpf.Behaviors">

    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Cobalt.xaml" />
                <ResourceDictionary
                    Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/flatbutton.xaml" />
                <ResourceDictionary
                    Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />

                <ResourceDictionary
                    Source="pack://application:,,,/SN.withSIX.Core.Presentation.Wpf;component/Styles/Accents/BaseLight.xaml" />
                <ResourceDictionary
                    Source="pack://application:,,,/SN.withSIX.Core.Presentation.Wpf;component/Styles/Accents/BaseOverrides.xaml" />

                <ResourceDictionary
                    Source="pack://application:,,,/SN.withSIX.Core.Presentation.Wpf;component/Styles/SixOld.xaml" />
                <ResourceDictionary
                    Source="Styles\AppConverters.xaml" />
                <ResourceDictionary>
                    <wpf1:AppBootstrapper x:Key="appBootstrapper" />
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>

            <chat:ChatFormatter x:Key="ChatFormatter" />
            <chat:ChatFormatterSafe x:Key="ChatFormatterSafe" />


            <Style TargetType="{x:Type controls:LibraryControl}"
                   BasedOn="{StaticResource {x:Type controls:LibraryControl}}">
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <HierarchicalDataTemplate DataType="{x:Type games1:LibraryBase}"
                                                  ItemsSource="{Binding ChildrenView}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <TextBlock Text="{Binding Icon}" FontSize="16"
                                           Grid.Column="0" HorizontalAlignment="Center" Margin="0 0 4 0"
                                           ToolTip="{Binding Model.State}">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">
                                            <Setter Property="FontFamily" Value="{DynamicResource IconFont}" />
                                            <Setter Property="HorizontalAlignment" Value="Center" />
                                            <Setter Property="VerticalAlignment" Value="Center" />

                                            <Setter Property="Foreground"
                                                    Value="{Binding IconForeground, FallbackValue={StaticResource SixGray}}" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IconForeground}"
                                                             Value="{x:Null}">
                                                    <Setter Property="Foreground"
                                                            Value="{Binding Model.State, Converter={StaticResource ModStateToBrushConverter}, FallbackValue={StaticResource SixGray}}" />
                                                </DataTrigger>
                                                <Trigger Property="Text" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <Grid Grid.Column="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <TextBlock HorizontalAlignment="Stretch"
                                               TextTrimming="CharacterEllipsis"
                                               extensions:TextBlockTrimmedTooltip.AutomaticToolTipEnabled="True">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}"
                                                   BasedOn="{StaticResource {x:Type TextBlock}}">
                                                <Setter Property="Text" Value="{Binding Header}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Header}" Value="{x:Null}">
                                                        <Setter Property="Text" Value="{Binding Model.Name}" />
                                                    </DataTrigger>
                                                    <DataTrigger Value="True">
                                                        <DataTrigger.Binding>
                                                            <MultiBinding
                                                                Converter="{StaticResource AreEqualConverter}">
                                                                <Binding Path="DataContext.ActiveItem"
                                                                         RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type TreeView}}" />
                                                                <Binding Path="Model" />
                                                            </MultiBinding>
                                                        </DataTrigger.Binding>
                                                        <Setter Property="FontWeight" Value="Bold" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>

                                    <TextBlock Text="{Binding Children.Count, StringFormat={} [{0}]}"
                                               Grid.Column="1">
                                        <TextBlock.Style>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Setter Property="Visibility"
                                                        Value="{Binding Children.Count, Converter={StaticResource NonZeroToVisibilityCollapsedConverter}}" />
                                                <!-- Hack -->
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding ShowItemsInTree}"
                                                                 Value="True">
                                                        <Setter Property="Visibility" Value="Collapsed" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </Grid>

                                <TextBlock Grid.Column="1" Grid.Row="1"
                                           Visibility="{Binding SubHeader, Converter={StaticResource NotNullToVisibilityConverter}, FallbackValue=Collapsed}"
                                           Text="{Binding SubHeader, StringFormat={}by {0}}"
                                           TextTrimming="CharacterEllipsis"
                                           extensions:TextBlockTrimmedTooltip.AutomaticToolTipEnabled="True">
                                    <TextBlock.Style>
                                        <Style TargetType="{x:Type TextBlock}">

                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                    <Setter Property="Foreground"
                                                            Value="{DynamicResource SixLightGray}" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>

                                <TextBlock Text="{Binding Items.Count}" Grid.Column="2" />
                            </Grid>
                        </HierarchicalDataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type Popup}" x:Key="ContentPopupMenuStyle">
                <Setter Property="Placement" Value="Bottom" />
                <Setter Property="PlacementRectangle" Value="0,56,0,0" />
                <Setter Property="behaviors:PopupMenuCloseBehavior.IsEnabled" Value="True" />
            </Style>

            <Style TargetType="{x:Type Border}" x:Key="ContentPopupBorderStyle">
                <Setter Property="Background" Value="{DynamicResource BlackBrush}" />
                <Setter Property="Height" Value="24" />
                <!--<Setter Property="Margin" Value="8 0" />-->
                <Setter Property="Width"
                        Value="{Binding ItemWidth, Converter={StaticResource DoubleLessConverter}, ConverterParameter={x:Static wpf1:UiConstants.DefaultMargin}, RelativeSource={RelativeSource FindAncestor, AncestorType=telerik:VirtualizingWrapPanel}}" />
                <Setter Property="Visibility"
                        Value="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType=ListBoxItem}, Converter={StaticResource BooleanToVisibilityCollapsedConverter}, FallbackValue=Collapsed}" />
            </Style>

            <Style TargetType="{x:Type Button}" x:Key="ModOmniButtonStyle"
                   BasedOn="{StaticResource ImageButtonStyle}">
                <Setter Property="FontFamily" Value="{StaticResource IconFont}" />
                <Setter Property="FontSize" Value="24" />
                <Setter Property="Content" Value="{x:Static core1:SixIconFont.withSIX_icon_Folder_Add}" />
                <Setter Property="Foreground" Value="{StaticResource SixLightGray}" />
                <Setter Property="Command"
                        Value="{Binding DataContext.HandleModInCollectionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType=library:ModLibraryView}}" />
                <Setter Property="CommandParameter" Value="{Binding}" />
                <!-- we could use selecteditem.selecteditem ? -->
                <Setter Property="ToolTip" Value="Add to active collection" />

                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsInCurrentCollection}" Value="True">
                        <Setter Property="Content"
                                Value="{x:Static core1:SixIconFont.withSIX_icon_Folder_Check}" />
                        <Setter Property="ToolTip" Value="Remove from active collection" />
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                       Value="True" />
                            <Condition Binding="{Binding IsInCurrentCollection}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Content"
                                    Value="{x:Static core1:SixIconFont.withSIX_icon_Folder_Remove}" />
                            <Setter Property="Foreground" Value="{StaticResource SixSoftRed}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}"
                                       Value="True" />
                            <Condition Binding="{Binding IsInCurrentCollection}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter Property="Foreground" Value="{StaticResource SixGreen}" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="LibraryDataGridStyle" TargetType="{x:Type DataGrid}"
                   BasedOn="{StaticResource DataGridLightStyle}">
                <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
            </Style>

            <Style x:Key="DataGridGroupStyle" TargetType="{x:Type GroupItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type GroupItem}">
                            <Expander IsExpanded="False">
                                <Expander.Header>
                                    <Grid>
                                        <TextBlock Foreground="{DynamicResource WhiteBrush}"
                                                   Margin="0 0 60 0"
                                                   TextTrimming="CharacterEllipsis">
                                            <TextBlock
                                                Text="{Binding Name, Converter={converters:ToUpperConverter}}" />
                                            (
                                            <TextBlock
                                                Text="{Binding Items.Count}" />
                                            )
                                        </TextBlock>
                                        <!--                                                <Button
                                                    Style="{StaticResource ImageButtonStyle}"
                                                    Margin="0 0 4 0"
                                                    VerticalAlignment="Center"
                                                    HorizontalAlignment="Right"
                                                    Foreground="White" FontFamily="{StaticResource IconFont}"
                                                    Content="{x:Static core1:SixIconFont.withSIX_icon_Hexagon_Info}"
                                                    Command="{Binding DataContext.ViewCategoryOnline, RelativeSource={RelativeSource FindAncestor, AncestorType=UserControl}}"
                                                    CommandParameter="{Binding Name}"
                                                    ToolTip="explore online" />-->
                                    </Grid>
                                </Expander.Header>
                                <Expander.Content>
                                    <ItemsPresenter />
                                </Expander.Content>
                            </Expander>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ContentListBoxItemStyle" TargetType="{x:Type ListBoxItem}"
                   BasedOn="{StaticResource {x:Type ListBoxItem}}">
                <Style.Resources>
                    <ContextMenu x:Key="ContentContextMenu" x:Shared="true"
                                 DataContext="{Binding PlacementTarget.Tag.ContextMenu, RelativeSource={RelativeSource Self}}" />
                </Style.Resources>
                <Setter Property="VerticalContentAlignment" Value="Center" />
                <!--
                <Setter Property="Width" Value="{x:Static play:UiConstants.ContentColumnWidth}" />
                <Setter Property="Height" Value="{x:Static play:UiConstants.ContentRowHeight}" />
-->
                <Setter Property="Margin" Value="0 0 8 4" />
                <!-- These margins are supported by the UiConstants -->
                <Setter Property="ContextMenu" Value="{StaticResource ContentContextMenu}" />
                <Setter Property="Tag"
                        Value="{Binding DataContext, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBox}}}" />
            </Style>

            <Style x:Key="ContentListBoxStyle" TargetType="{x:Type ListBox}"
                   BasedOn="{StaticResource {x:Type ListBox}}">
                <Setter Property="SelectionMode" Value="Extended" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <controls:CustomVirtualizingWrapPanel IsItemsHost="True"
                                                                  ItemWidth="{x:Static wpf1:UiConstants.ContentColumnWidthInclMargins}"
                                                                  ItemHeight="{x:Static wpf1:UiConstants.ContentRowHeightInclMargins}"
                                                                  behaviors1:VirtualizingWrapPanelBehavior.MinItemWidth="{x:Static wpf1:UiConstants.ContentColumnWidthInclMargins}" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type ListBoxItem}"
                               BasedOn="{StaticResource ContentListBoxItemStyle}" />
                    </Setter.Value>
                </Setter>
                <Style.Resources>
                    <!--
                            <Style TargetType="{x:Type reactiveUi:ViewModelViewHost}">
                                <Setter Property="Width" Value="{x:Static play:UiConstants.ContentColumnWidth}" />
                                <Setter Property="Height" Value="40" />
                            </Style>
-->
                </Style.Resources>
            </Style>

            <Style x:Key="ContentListBoxSingleStyle" TargetType="{x:Type ListBox}"
                   BasedOn="{StaticResource ContentListBoxStyle}">
                <Setter Property="SelectionMode" Value="Single" />
            </Style>

            <Style x:Key="ContentListBoxWideStyle" TargetType="{x:Type ListBox}"
                   BasedOn="{StaticResource ContentListBoxStyle}">
                <!--            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />-->
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <controls:CustomVirtualizingWrapPanel IsItemsHost="True"
                                                                  ItemWidth="{x:Static wpf1:UiConstants.ContentColumnWideWidthInclMargins}"
                                                                  ItemHeight="{x:Static wpf1:UiConstants.ContentRowHeightInclMargins}"
                                                                  behaviors1:VirtualizingWrapPanelBehavior.MinItemWidth="{x:Static wpf1:UiConstants.ContentColumnWideWidthInclMargins}" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ContentListBoxWideSingleStyle" TargetType="{x:Type ListBox}"
                   BasedOn="{StaticResource ContentListBoxWideStyle}">
                <Setter Property="SelectionMode" Value="Single" />
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</wpf:SingleInstanceApp>