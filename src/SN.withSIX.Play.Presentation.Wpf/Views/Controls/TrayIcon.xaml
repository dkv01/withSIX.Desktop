<UserControl x:Class="SN.withSIX.Play.Presentation.Wpf.Views.Controls.TrayIcon"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:tb="clr-namespace:Hardcodet.Wpf.TaskbarNotification;assembly=Hardcodet.Wpf.TaskbarNotification"
             xmlns:viewModels="clr-namespace:SN.withSIX.Core.Applications.MVVM.ViewModels;assembly=SN.withSIX.Core.Applications.MVVM"
             mc:Ignorable="d" Name="Uc"
             d:DataContext="{d:DesignInstance viewModels:IShellViewModelTrayIcon}"
             d:DesignHeight="300" d:DesignWidth="300">
    <!--
        The TaskbarIcon uses a hack to set the DataContext onto the ContextMenu, as it does not have it's PlacementTarget set. This means we cannot apply the same approaches as we are used to.
        The current setup of this UserControl takes this into account, by setting the DataContext of the TaskBarIcon to the actual TrayIconContextMenu property..
        We then use ElementName=Uc, on the bindings that actually need the ShellViewModel as DataContext.
    -->
    <tb:TaskbarIcon Name="TaskbarIcon" DataContext="{Binding TrayIconContextMenu}"
                    IconSource="{Binding Icon, ElementName=Uc}">
        <tb:TaskbarIcon.ContextMenu>
            <ContextMenu />
        </tb:TaskbarIcon.ContextMenu>
    </tb:TaskbarIcon>
</UserControl>